# Forge Framework v1.6 Rules

# 1. Project root
- Project root is always "forge-v3".
- All resource files must be placed relative to project root:
    - app/Controllers, app/Models, app/Services, app/Dto, app/Resources, app/Tests
    - modules/ExampleModule/src/Controllers, src/Models, src/Services, src/Resources, src/Tests

# 2. Controllers
- Controllers must be final classes under the namespace App\Controllers or App\Modules\<Module>\Controllers.
- Never extend a base Controller class.
- Always use traits:
    - ControllerHelper
    - SecurityHelper
- Traits must be imported explicitly with use statements.
- Services injected via constructor only (no "new" inside controller).
- Use Forge\Core\Http\Response as return type.
- Methods returning views must use `$this->view(view: "views/pages/...", data: [...])`.
- Methods returning API responses must use `$this->apiResponse(...)` or `$this->apiError(...)`.
- Route annotations must use `#[Route("/path", "METHOD")]`.
- Middleware annotations must use `#[Middleware("web")]` or module-specific middlewares.
- Do not use Laravel or external helpers (no `parent::__construct()`, no `response()->json()`, no `redirect()->route()`).

# 3. Models
- Models must extend `Forge\Core\Database\Model`.
- Namespace follows module or app structure.
- Use traits as appropriate (e.g., `Hastimestamps`, `SoftDeletes`, `RepositoryTrait`, `HasMetaData`, `Metadata`).
- Table name set via `#[Table("table_name")]`.
- Columns defined via `#[Column(...)]`.
- Relations return other Model instances or DTOs.
- No Eloquent, no Laravel code.

# 4. Services
- Services under app/Services or modules/<Module>/src/Services.
- Named `<Name>Service.php`.
- Traits like CacheLifecycleHooks can be used.
- Dependency injection via constructor only.
- Return plain PHP objects, arrays, or Forge Response as needed.

# 5. Migrations
- Named `YYYY_MM_DD_HHMMSS_Create<Entities>Table.php`.
- Must use Forge\Core\Database\Migrations\Migration base class.
- Table and column definitions via Forge attributes.
- No Laravel migrations or Blueprint.

# 6. Views & Layouts
- Views: always inside views/pages/<entity>/
- Layouts: always inside layouts/<layout_name>/
- Resources inside app/Resources or modules/<Module>/src/Resources
- Never reference external CDNs or JS frameworks unless project explicitly requires.

# 7. DTOs
- Named `<Name>Dto.php`.
- Namespace under App\Dto or modules/<Module>/src/Dto.
- Must have fromArray() and toArray() methods.
- Typed properties only (no untyped arrays).

# 8. Tests
- Tests under app/Tests or modules/<Module>/src/Tests.
- Named `<Name>Test.php`.
- Use ForgeTesting attributes: #[Test], #[Group], #[Skip].
- Do not rely on PHPUnit directly; use ForgeTesting TestCase.
- Use $this->get(), $this->post(), $this->patch() for HTTP testing.

# 9. Modules
- Module root: modules/<Module>/.
- Structure:
    - forge.json
    - src/
        - <Module>.php
        - Controllers/
        - Services/
        - Models/
        - Commands/
        - Contracts/
        - Tests/
    - config/
    - resources/
        - views/
        - assets/
- Use Module attributes:
    - #[Module(name: "...", description: "...", order: 100)]
    - #[Service]
    - #[Provides], #[Requires], #[Compatibility], #[ConfigDefaults]
- Lifecycle hooks via #[LifecycleHook(hook: LifecycleHookName::<HOOK>)]
- CLI commands via #[CLICommand(name: "...", description: "...")]

# 10. File generation behavior
- Always create the file directly in the project structure.
- Never output file contents in the chat.
- Analyze the existing project context first:
    - Inspect all files in app/ and modules/ for patterns.
    - Resolve namespaces, traits, services, and imports.
    - Use traits in generated code if detected in context.
- Auto-open the file after creation.
- For views, layouts, migrations, DTOs, tests: place according to rules above.
- Never add libraries, base classes, or helpers not in Forge Core.
- Always follow existing project conventions exactly.

# 11. Context-aware generation
- Before generating any file:
    - Open traits, service files, models, controllers in the project to understand patterns.
    - Detect constructor injection, route patterns, middleware, and view usage.
    - Detect existing module structure and follow it.
- Do not invent structures outside Forge conventions.
